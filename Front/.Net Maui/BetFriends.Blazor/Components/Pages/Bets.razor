@page "/"
@inject Components.Viewmodels.RetrieveBetsViewModel vm

<h2>Mes paris en cours</h2>
<div>
    <Toasts class="p-3" Messages="vm.Errors" AutoHide="true" Delay="2000" Placement="ToastsPlacement.TopRight" />
    @foreach (var bet in vm.Bets)
    {
        <Card>
            <CardHeader>
                <h4>Fin: @bet.FormattedEndDate <span style="float:right">Jetons: @bet.Coins</span></h4>
            </CardHeader>
            <CardBody>
                <p>@bet.Description</p>
            </CardBody>
            <CardFooter>
                <div class="row align-items-start">
                    <div class="col">
                        Participant(s) : @bet.AcceptedCount / @bet.InvitedCount
                    </div>
                    <div class="col">
                    @if(bet.Answer.HasValue)
                    {
                        if(bet.Answer.Value)
                        {
                                <span>Accepté</span>
                        }
                        if (!bet.Answer.Value)
                        {
                                <span>Refusé</span>
                        }
                    }
                    @if (!string.IsNullOrEmpty(bet.Result))
                    {
                        <span>@bet.Result</span>
                    }
                    </div>
                    @if(bet.CanAnswer)
                    {
                        <div class="col">
                            <Button Color="ButtonColor.Success" @onclick="(() => vm.AcceptCommand.Execute(bet.BetId))">Accepter</Button>
                            <Button Color="ButtonColor.Danger" @onclick="(() => vm.RejectCommand.Execute(bet.BetId))">Refuser</Button>
                        </div>
                    }
                    @if (bet.CanClose)
                    {
                        <div class="col">
                            <Button Color="ButtonColor.Success" @onclick="(() => ShowModal(bet.BetId))">Terminer</Button>
                        </div>
                    }
                </div>
            </CardFooter>
        </Card>
    }
</div>

<Modal @ref="completeModal" Title="Terminer le pari" Size="ModalSize.ExtraLarge" IsVerticallyCentered="true" CloseOnEscape="true">
    <BodyTemplate>
        <Card>
            <CardBody>
                <InputRadioGroup @bind-Value="@vm.IsSuccess">
                    <InputRadio Value="true" /> Gagné 
                    <InputRadio Value="false" /> Perdu
                </InputRadioGroup>
            </CardBody>
        </Card>
        @if(vm.IsSuccess.GetValueOrDefault(false))
        {
            <Card>
                <CardHeader>
                    Charger une preuve
                </CardHeader>
                <CardBody>
                    <InputFile OnChange="GetBs64" />
                </CardBody>
            </Card>
        }
        
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Success" onclick="@(async() => await vm.CompleteCommand.ExecuteAsync(completeModal))">Valider</Button>
    </FooterTemplate>
</Modal>

@code {

    private Modal completeModal = default!;

    private Task ShowModal(string betId)
    {
        vm.SetBetIdToComplete(betId);
        return completeModal.ShowAsync();
    }

    private async Task GetBs64(InputFileChangeEventArgs e)
    {
        using var stream = e.File.OpenReadStream();
        using var reader = new StreamReader(stream);
        var bytes = System.Text.Encoding.UTF8.GetBytes(await reader.ReadToEndAsync());
        vm.Proof = Convert.ToBase64String(bytes);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await vm.LoadAsync();
    }
}
