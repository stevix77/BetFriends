# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript


variables:
  ProjectTest: 'Back/.Net/**/*Tests.csproj'
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'release'
  projectApi: 'Back/.Net/BetFriends.Api/BetFriends.Api.csproj'

trigger:
  branches:
    include: [ feature/*, main ]

jobs:

- job: Build_back
  displayName: 'build back on linux image'

  pool:
    vmImage: 'ubuntu-latest'

  steps:
# Database 

  # - task: DockerCompose@1
  #   inputs:
  #     dockerComposeFile: 'docker-compose.yml'
  #     action: 'Run a Docker Compose command'
  #     containerregistrytype: 'Container Registry'
  #     dockerComposeCommand: up -d
  #     projectName: betfriends
  #   displayName: Run docker compose to create db server

  # - task: PowerShell@2
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       docker exec -it sqlserv-betfriends "bash"
  #       /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "Password!" -Q "create database betfriends"
  #       exit
  #   displayName: Connect to db server and create database
  
  # - task: DotNetCoreCLI@2
  #   displayName: 'build db'
  #   inputs:
  #     command: build
  #     arguments: --configuration $(buildConfiguration) 
  #     projects: 'Database/BetFriends.Database/BetFriends.Database.Build/BetFriends.Database.Build.csproj'
  
  # - task: CopyFiles@1
  #   inputs:
  #     SourceFolder: '$(System.DefaultWorkingDirectory)'
  #     Contents: '**/BetFriends.Database.Build.dacpac'
  #     TargetFolder: '$(Build.ArtifactStagingDirectory)/db'
  
  # - task: PublishBuildArtifacts@1
  #   inputs:
  #     PathtoPublish: '$(Build.ArtifactStagingDirectory)/db'
  #     ArtifactName: '$(Parameters.ArtifactName)'
  
  # - task: DotNetCoreCLI@2
  #   displayName: 'run db deploy'
  #   inputs:
  #     command: run
  #     arguments: --configuration $(buildConfiguration) $(Build.ArtifactStagingDirectory)/db/Database/BetFriends.Database/BetFriends.Database.Build/bin/release/netstandard2.0/BetFriends.Database.Build.dacpac
  #     projects: 'Database/BetFriends.Database/BetFriends.Database.Deploy/BetFriends.Database.Deploy.csproj'
  #     WorkingDirectory: '$(Build.SourcesDirectory)'
  
  # # .Net 8
  
  # - task: NuGetCommand@2
  #   inputs:
  #     restoreSolution: 'Back/.net/*.sln'
  #   displayName: Restore solution nuget
  
  # - task: UseDotNet@2
  #   inputs:
  #     packageType: 'sdk'
  #     version: '8.x'
  
  # - task: DotNetCoreCLI@2
  #   displayName: 'unit tests'
  #   inputs:
  #     command: test
  #     projects: '$(ProjectTest)'
  #     arguments: --configuration $(buildConfiguration) --collect "XPlat Code coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\Coverage\
  #     publishTestResults: true
  #     nobuild: true

  # - script: 'dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.5.8'  
  #   displayName: 'Install ReportGenerator tool'

  # - script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'  
  #   displayName: 'Create reports' 
  
  # - task: PublishCodeCoverageResults@1
  #   displayName: 'Publish code coverage report'
  #   inputs:
  #     codeCoverageTool: 'Cobertura'
  #     summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'
  
  # - task: DotNetCoreCLI@2
  #   displayName: 'build api'
  #   inputs:
  #     command: build
  #     configuration: '$(BuildConfiguration)'
  #     projects: '$(projectApi)'
  
  # - task: DotNetCoreCLI@2
  #   displayName: 'api binaries'
  #   inputs:
  #     command: publish
  #     projects: '$(projectApi)'
  #     zipAfterPublish: false
  #     publishWebProjects: false
  #     arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/api'
  
  # - task: PublishBuildArtifacts@1
  #   displayName: 'Publish Artifact Api'
  #   inputs:
  #     PathtoPublish: '$(build.artifactstagingdirectory)/api'
  #     ArtifactName: '$(Parameters.ArtifactName)'
  #   condition: succeededOrFailed()
    
   # NodeJS #  
   
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install Node.js 20.x'
  
  - script: |
      npm install
    displayName: 'npm install packages NodeJS'
    workingDirectory: '$(Build.SourcesDirectory)/Back/NodeJS'
    
  - script: |
      npm run test
    displayName: 'npm test'
    workingDirectory: '$(Build.SourcesDirectory)/Back/NodeJS'
  
  - task: PublishCodeCoverageResults@1
    continueOnError: true
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/Back/NodeJS/coverage/coverage-final.json'
  
  - script: |
      npm install
    displayName: 'npm install api NodeJS'
    workingDirectory: '$(Build.SourcesDirectory)/Back/NodeJS/api/nest'
  
  - script: |
      npm run build
    displayName: 'npm build'
    workingDirectory: '$(Build.SourcesDirectory)/Back/NodeJS/api/nest'
  
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Back/NodeJS/api/nest'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/nodejs-api.zip'
      replaceExistingArchive: true
  
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/nodejs-api.zip'
    displayName: 'Publish npm artifact'
  
# # Build FRONT

# - job: Build_front
#   displayName: 'build front on macOs image'

#   pool:
#     vmImage: 'macOs-latest'

#   steps:
  
#   # Node
#   - task: Npm@1
#     displayName: 'Install package.json'
#     inputs:
#       command: install
#       workingDir: 'Front/TS/src'
#       verbose: true
  
#   - task: Npm@1
#     displayName: 'Install tests package.json'
#     inputs:
#       command: install
#       customCommand: 'install package.json'
#       workingDir: 'Front/TS/tests'
#       verbose: true
  
#   - task: Npm@1
#     displayName: 'Run tests'
#     inputs:
#       command: custom
#       customCommand: 'run test'
#       verbose: true
#       workingDir: 'Front/TS/tests'
  
#   - task: PublishCodeCoverageResults@1
#     continueOnError: true
#     inputs:
#       codeCoverageTool: Cobertura
#       summaryFileLocation: '$(System.DefaultWorkingDirectory)/Front/TS/tests/coverage/coverage-final.json'

#   # angular #
  
#   - task: Npm@1
#     inputs:
#       command: custom
#       customCommand: 'install -g @angular/cli'
#     displayName: 'Install Angular cli'
  
#   - task: Npm@1
#     displayName: 'Install angular project'
#     inputs:
#       command: custom
#       customCommand: 'install'
#       verbose: true
#       workingDir: 'Front/TS/src/infrastructure/ui/Angular'
  
#   - task: Npm@1
#     displayName: Build angular project
#     inputs:
#       command: custom
#       verbose: true
#       workingDir: 'Front/TS/src/infrastructure/ui/Angular'
#       customCommand: 'run build'
  
#   - task: CopyFiles@2
#     displayName: Copy files into artifact directory
#     inputs:
#       sourceFolder: '$(System.DefaultWorkingDirectory)/Front/TS/src/infrastructure/ui/Angular/dist/angular'
#       targetFolder: '$(Build.ArtifactStagingDirectory)/angular'
  
#   - task: PublishBuildArtifacts@1
#     displayName: Publish angular artifact
#     inputs:
#       PathtoPublish: '$(Build.ArtifactStagingDirectory)/angular'
#       ArtifactName: 'drop-angular'
#       publishLocation: 'Container'
  
#     # vue3 #
#   - task: Npm@1
#     displayName: 'Install vue project'
#     inputs:
#       command: install
#       verbose: true
#       workingDir: 'Front/TS/src/infrastructure/ui/Vue/'
  
#   - task: Npm@1
#     displayName: Build vue project
#     inputs:
#       command: custom
#       verbose: true
#       workingDir: 'Front/TS/src/infrastructure/ui/Vue'
#       customCommand: 'run build-only'
  
#   - task: CopyFiles@2
#     displayName: Copy files into artifact directory
#     inputs:
#       sourceFolder: 'Front/TS/src/infrastructure/ui/Vue/dist'
#       targetFolder: '$(Build.ArtifactStagingDirectory)/vue'
  
#   - task: PublishBuildArtifacts@1
#     displayName: Publish artifact
#     inputs:
#       PathtoPublish: '$(Build.ArtifactStagingDirectory)/vue'
#       ArtifactName: 'drop-vue'
  
#   # .Net MAUI #
  
#   - task: UseDotNet@2
#     inputs:
#       packageType: 'sdk'
#       version: '8.x'
  
#   - task: CmdLine@2
#     displayName: 'Install Maui Workload'
#     inputs:
#       script: 'dotnet workload install maui'
  
#   - task: DotNetCoreCLI@2
#     displayName: 'unit tests'
#     inputs:
#       command: test
#       projects: 'Front/.Net Maui/**/*Tests.csproj'
#       arguments: --configuration $(buildConfiguration) --collect "XPlat Code coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\Coverage\
#       publishTestResults: true
#       nobuild: true
  
#   - script: 'dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.5.8'  
#     displayName: 'Install ReportGenerator tool'
  
#   - script: 'reportgenerator -reports:$(agent.tempdirectory)/**/coverage.cobertura.xml -targetdir:$(build.sourcesdirectory)/coverlet/reports -reporttypes:"Cobertura"'  
#     displayName: 'create reports' 
  
#   - task: publishcodecoverageresults@1
#     displayName: 'publish code coverage report'
#     inputs:
#       codecoveragetool: 'Cobertura'
#       summaryfilelocation: '$(build.sourcesdirectory)/coverlet/reports/Cobertura.xml'

