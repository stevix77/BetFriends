# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript


variables:
  ProjectTest: 'Back/.Net/**/*Tests.csproj'
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'release'
  projectApi: 'Back/.Net/BetFriends.Api/BetFriends.Api.csproj'

trigger:
  branches:
    include: [ feature/*, main ]

pool:
  vmImage: macos-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
  displayName: 'Install Node.js 20.x'

- task: Npm@1
  displayName: 'Install package.json'
  inputs:
    command: install
    workingDir: 'Front/TS/src'
    verbose: true

- task: Npm@1
  displayName: 'Install tests package.json'
  inputs:
    command: install
    customCommand: 'install package.json'
    workingDir: 'Front/TS/tests'
    verbose: true


- task: Npm@1
  displayName: 'Run tests'
  inputs:
    command: custom
    customCommand: 'run test'
    verbose: true
    workingDir: 'Front/TS/tests'

- task: PublishCodeCoverageResults@1
  continueOnError: true
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/Front/TS/tests/coverage/coverage-final.json'

# angular #

- task: Npm@1
  inputs:
    command: custom
    customCommand: 'install -g @angular/cli'
  displayName: 'Install Angular cli'

- task: Npm@1
  displayName: 'Install angular project'
  inputs:
    command: custom
    customCommand: 'install'
    verbose: true
    workingDir: 'Front/TS/src/infrastructure/ui/Angular'

- task: Npm@1
  displayName: Build angular project
  inputs:
    command: custom
    verbose: true
    workingDir: 'Front/TS/src/infrastructure/ui/Angular'
    customCommand: 'run build'

- task: CopyFiles@2
  displayName: Copy files into artifact directory
  inputs:
    sourceFolder: '$(System.DefaultWorkingDirectory)/Front/TS/src/infrastructure/ui/Angular/dist/angular'
    targetFolder: '$(Build.ArtifactStagingDirectory)/angular'

- task: PublishBuildArtifacts@1
  displayName: Publish angular artifact
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/angular'
    ArtifactName: 'drop-angular'
    publishLocation: 'Container'

  # vue3 #
- task: Npm@1
  displayName: 'Install vue project'
  inputs:
    command: install
    verbose: true
    workingDir: 'Front/TS/src/infrastructure/ui/Vue/'

- task: Npm@1
  displayName: Build vue project
  inputs:
    command: custom
    verbose: true
    workingDir: 'Front/TS/src/infrastructure/ui/Vue'
    customCommand: 'run build-only'

- task: CopyFiles@2
  displayName: Copy files into artifact directory
  inputs:
    sourceFolder: 'Front/TS/src/infrastructure/ui/Vue/dist'
    targetFolder: '$(Build.ArtifactStagingDirectory)/vue'

- task: PublishBuildArtifacts@1
  displayName: Publish artifact
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/vue'
    ArtifactName: 'drop-vue'

# .Net MAUI

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'

- task: CmdLine@2
  displayName: 'Install Maui Workload'
  inputs:
    script: 'dotnet workload install maui'

- task: DotNetCoreCLI@2
  displayName: 'unit tests'
  inputs:
    command: test
    projects: 'Front/.Net Maui/**/*Tests.csproj'
    arguments: --configuration $(buildConfiguration) --collect "XPlat Code coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
    publishTestResults: true
    nobuild: true

- task: DotNetCoreCLI@2
  displayName: 'build .net maui'
  inputs:
    command: build
    projects: 'Front/.Net Maui/**/*.sln'
    arguments: --configuration $(buildConfiguration)

# .Net 8

- task: NuGetCommand@2
  inputs:
    restoreSolution: 'Back/.net/*.sln'
  displayName: Restore solution nuget

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'

- task: DotNetCoreCLI@2
  displayName: 'unit tests'
  inputs:
    command: test
    projects: '$(ProjectTest)'
    arguments: --configuration $(buildConfiguration) --collect "XPlat Code coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
    publishTestResults: true
    nobuild: true

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

- task: DotNetCoreCLI@2
  displayName: 'build api'
  inputs:
    command: build
    configuration: '$(BuildConfiguration)'
    projects: '$(projectApi)'

- task: DotNetCoreCLI@2
  displayName: 'api binaries'
  inputs:
    command: publish
    projects: '$(projectApi)'
    zipAfterPublish: false
    publishWebProjects: false
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/api'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact Api'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/api'
    ArtifactName: '$(Parameters.ArtifactName)'
  condition: succeededOrFailed()
  
 # NodeJS #

- script: |
    npm install
  displayName: 'npm install packages NodeJS'
  workingDirectory: '$(Build.SourcesDirectory)/Back/NodeJS'
  
- script: |
    npm run test
  displayName: 'npm test'
  workingDirectory: '$(Build.SourcesDirectory)/Back/NodeJS'

- task: PublishCodeCoverageResults@1
  continueOnError: true
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/Back/NodeJS/coverage/coverage-final.json'

- script: |
    npm install
  displayName: 'npm install api NodeJS'
  workingDirectory: '$(Build.SourcesDirectory)/Back/NodeJS/src/infrastructure/api/nest'

- script: |
    npm run build
  displayName: 'npm build'
  workingDirectory: '$(Build.SourcesDirectory)/Back/NodeJS/src/infrastructure/api/nest'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Back/NodeJS/src/infrastructure/api/nest'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/nodejs-api.zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/nodejs-api.zip'
  displayName: 'Publish npm artifact'